{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","console","log","trim","id","uuid","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.91fbd53f.chunk.js","sourcesContent":["import React, { Fragment , useState} from 'react';\nimport uuid from 'uuid/dist/v4'\nimport PropTypes from 'prop-types';\n\nconst Formulario = ({crearCita}) => {\n\n  // Crear State de Citas\n  const [ cita, actualizarCita ] = useState({\n    mascota: '',\n    propietario: '',\n    fecha: '',\n    hora: '',\n    sintomas: ''\n  })\n\n  // Crear State de Error\n  const [error, actualizarError] = useState(false);\n\n\n  // Funcion que se ejecuta cada que el usuario escribe en un input\n  const actualizarState = (e) => {\n    actualizarCita({\n      ...cita,\n      [e.target.name]:e.target.value\n    })\n  }\n\n  // Extraer los valores\n  const { mascota, propietario, fecha, hora, sintomas } = cita;\n\n  // Cuando usuario persiona agregar cita para mandarformulario\n  const submitCita = (e) => {\n    e.preventDefault();\n    console.log('holaa')\n\n    // Validr\n      if(mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === ''){\n        actualizarError(true)\n        return;\n      }\n\n    //  Eliminar el mensaje previo\n    actualizarError(false)\n\n    // Asignar un ID\n    cita.id = uuid();\n    console.log(cita)\n\n    // Crear la cita\n    crearCita(cita);\n\n    // Reniciar el form\n    actualizarCita({\n      mascota: '',\n      propietario: '',\n      fecha: '',\n      hora: '',\n      sintomas: ''\n    })\n    \n  }\n\n  return (\n    <Fragment>\n      <h2>Crear Citas</h2>\n      \n      {error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p> : null}\n\n      <form \n        onSubmit={submitCita}\n      >\n        <label>Nombre Mascota</label>\n        <input\n          type=\"text\"\n          name=\"mascota\"\n          className=\"u-full-width\"\n          placeholder=\"Nombre Mascota\"\n          onChange={actualizarState}\n          value={mascota}\n        />\n\n        <label>Nombre Doeño</label>\n        <input\n          type=\"text\"\n          name=\"propietario\"\n          className=\"u-full-width\"\n          placeholder=\"Nombre Doeño de mascota\"\n          onChange={actualizarState}\n          value={propietario}\n        />\n\n        <label>Fecha</label>\n        <input\n          type=\"date\"\n          name=\"fecha\"\n          className=\"u-full-width\"\n          onChange={actualizarState}\n          value={fecha}\n        />\n\n        <label>Hora</label>\n        <input\n          type=\"time\"\n          name=\"hora\"\n          className=\"u-full-width\"\n          onChange={actualizarState}\n          value={hora}\n        />\n\n        <label>Sintomas</label>\n        <textarea\n          className=\"u-full-width\"\n          name=\"sintomas\"\n          onChange={actualizarState}\n          value={sintomas}\n        ></textarea>\n          \n        <button\n          type=\"submit\"\n          className=\"u-full-width button-primary\"\n        >Agregar Cita</button>\n      </form>\n    </Fragment>\n  );\n}\n\nFormulario.propTypes = {\n  crearCita: PropTypes.func.isRequired\n}\nexport default Formulario;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Cita = ({cita ,eliminarCita }) => {\n  return (\n    <div className=\"cita\">\n      <p>Mascota: <span > {cita.mascota} </span></p>\n      <p>propietario: <span > {cita.propietario} </span></p>\n      <p>fecha: <span > {cita.fecha} </span></p>\n      <p>hora: <span > {cita.hora} </span></p>\n      <p>Mascota: <span > {cita.sintomas} </span></p>\n\n      <button\n        className=\"button eliminar u-full-width\"\n        onClick={  () => eliminarCita(cita.id) }\n      >Eliminar &times;</button>\n    </div>\n  );\n}\nCita.propTypes = {\n  cita: PropTypes.object.isRequired,\n  eliminarCita: PropTypes.func.isRequired\n}\nexport default Cita;","import React, { Fragment, useState, useEffect } from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita';\n\n\nfunction App()  {\n\n  // Citas en local storage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if(!citasIniciales) {\n    citasIniciales = [];\n  }\n\n  // Agregar de Citas\n  const [citas, guardarCitas] = useState(citasIniciales);\n\n  // Use Effect para realizar ciertas operaciones cuando el state cambia\n  useEffect( () => {\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n\n    if(citasIniciales) {\n      localStorage.setItem('citas', JSON.stringify(citas))\n    } else {\n      localStorage.setItem('citas', JSON.stringify([]));\n    }\n  }, [citas] );\n\n\n  // Funcion que tome las citas actuales y agregue la nueva\n  const crearCita = cita => {\n    guardarCitas([ \n      ...citas,\n      cita \n    ]);\n  }\n\n  // Función que elimina una cita por su id\n  const eliminarCita = id => {\n    console.log(id)\n    const nuevasCitas = citas.filter(cita => cita.id !== id );\n    guardarCitas(nuevasCitas);\n  }\n\n  // Mensaje condicional\n  const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus Citas';\n\n\n  return (\n    <Fragment>\n      <h1>Administrador de Pacientes</h1>\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n              <Formulario \n                crearCita={crearCita}\n              />\n          </div>\n          <div className=\"one-half column\">\n              <h2>{titulo}</h2>\n              {citas.map(cita => (\n                <Cita\n                  key={cita.id}\n                  cita={cita}\n                  eliminarCita={eliminarCita}\n                />\n              ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}